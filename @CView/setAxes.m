function setAxes(obj, iAxesLayout)

l3D = obj(1).hParent.get3DMode;
iAxesPerView = 1 + double(l3D)*2;

for iI = 1:length(obj)
  hView = obj(iI);
  
  iFirstAxesInd = (hView.Ind - 1)*iAxesPerView + 1;
  iNTotalAxes = prod(iAxesLayout);
  iRemainingAxes = iNTotalAxes - iFirstAxesInd + 1;
  
  % These are the target and current number of axes for the current view
  iNAxes = min(iAxesPerView, iRemainingAxes);
  iNExistingAxes = numel(hView.hA);
  
  % Determine the number of image and quiver components
  csMode = {hView.hData.Type};
  iNQuiver = nnz(strcmp(csMode, 'vector'));
  if iNQuiver == 0
    iNImg = max(1, length(csMode));
  else
    iNImg = length(csMode) - iNQuiver;
  end
  
  if iNImg < size(hView.hI, 2)
    delete(hView.hI(:, iNImg + 1:end));
    hView.hI = hView.hI(:, 1:iNImg);
  end
  
  
  if iNExistingAxes > iNAxes
    
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    % Delete obsolete Axes (includes children)
    delete(hView.hA(iNAxes + 1:iNExistingAxes));
    
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    % Remove the handles to the deleted handles
    hView.hA  = hView.hA(1:iNAxes);
    hView.hI  = hView.hI(1:iNAxes, :);
    hView.hS1 = hView.hS1(1:iNAxes);
    hView.hS2 = hView.hS2(1:iNAxes);
    hView.hT  = hView.hT(:,:,:,1:iNAxes);
    
  elseif iNExistingAxes < iNAxes
    
    for iI = (iNExistingAxes + 1):iNAxes
      % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      % View axes and its children
      hView.hA(iI) = axes(...
        'Parent'            , hView.hParent.hF, ...
        'Layer'             , 'top', ...
        'Units'             , 'pixels', ...
        'Color'             , hView.hParent.SColors.bg_dark, ...
        'FontSize'          , 12, ...
        'XTickMode'         , 'manual', ...
        'YTickMode'         , 'manual', ...
        'XColor'            , hView.hParent.SColors.bg_dark, ...
        'YColor'            , hView.hParent.SColors.bg_dark, ...
        'XTickLabelMode'    , 'manual', ...
        'YTickLabelMode'    , 'manual', ...
        'XAxisLocation'     , 'top', ...
        'YDir'              , 'reverse', ...
        'Box'               , 'off', ...
        'HitTest'           , 'on', ...
        'XGrid'             , 'off', ...
        'YGrid'             , 'off', ...
        'GridAlpha'         , 0.5, ...
        'XMinorGrid'        , 'off', ...
        'YMinorGrid'        , 'off', ...
        'MinorGridAlpha'    , 0.5, ...
        'Visible'           , 'on');
      hold on
      
      try set(hView.hA(iI), 'YTickLabelRotation', 90); end
      uistack(hView.hA(iI), 'bottom');
      
      for iJ = 1:iNImg
        if iI > size(hView.hI, 1) || iJ > size(hView.hI, 2) || ~ishandle(hView.hI(iI, iJ))
          hView.hI(iI, iJ) = image( ...
            'Parent'                , hView.hA(iI), ...
            'CData'                 , zeros(1, 1, 3), ...
            'HitTest'               , 'off');
        end
      end
      
      for iJ = 1:iNQuiver
        if iI > size(hView.hQ, 1) || iJ > size(hView.hQ, 2) || ~ishandle(hView.hQ(iI, iJ))
          hView.hQ(iI, iJ) = cquiver(1, 1, 1, 1, ones(1, 3), ...
            'Parent'                , hView.hA(iI), ...
            'HitTest'               , 'off');
        end
      end
      
      %             obj.hL = line('XData', [0 10], 'YData', [0 10], 'LineWidth', 5);
      
%       if ~isempty(hView.hData)
        hView.hS1(iI) = scatter(1, 1, 12^2, 's', ...
          'Parent'                , hView.hA(iI), ...
          'MarkerEdgeColor'       , 'none', ...
          'MarkerFaceColor'       , hView.dColor, ...
          'Visible'               , 'on', ...
          'Hittest'               , 'off');
        
        hView.hS2(iI) = scatter(1, 1, 12^2, 's', ...
          'Parent'                , hView.hA(iI), ...
          'MarkerEdgeColor'       , 'none', ...
          'MarkerFaceColor'       , hView.dColor, ...
          'Visible'               , 'on', ...
          'Hittest'               , 'off');
        
        for iJ = 1:4
          hT(iJ) = text(1, 1, 'Test', ...
            'Parent'                , hView.hA(iI), ...
            'Units'                 , 'pixels', ...
            'FontSize'              , 14, ...
            'Hittest'               , 'off');
        end
        hT = reshape(hT, [2 1 2]);
        set(hT(:, :, 1), 'Color', 'k');
        set(hT(:, :, 2), 'Color', 'w');
        set(hT(:, 1, :), 'HorizontalAlignment', 'left');
        % set(hT(:, 2, :), 'HorizontalAlignment', 'right');
        set(hT(1, :, :), 'VerticalAlignment', 'cap');
        set(hT(2, :, :), 'VerticalAlignment', 'baseline');
        set(hT(2, 1, 1), 'Position', [11, 10]);
        set(hT(2, 1, 2), 'Position', [10, 11]);
        hView.hT(:,:,:,iI) = hT;
%       end
      
    end
  end
end